name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Platform-specific system dependencies for native C library compilation
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libomp-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install libomp

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python modules
      run: |
        python -m pip install --upgrade pip
        # Install build dependencies
        pip install --upgrade pip pytest pytest-cov
        echo "Installing omega-omg requirements..."
        pip install -r requirements.txt
        echo "Running omega-omg tests with coverage..."
        pytest --cov=dsl --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      # Skip Codecov upload on ARM runners due to lack of support
      if: success() && matrix.os != 'ubuntu-24.04-arm'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella-${{ matrix.os }}-python${{ matrix.python-version }}
        fail_ci_if_error: false

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-python${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          .coverage
        retention-days: 30

  # Security and quality checks
  security:
    name: Security and Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety ruff pylint

    - name: Run security checks with bandit
      run: |
        bandit -r dsl/ -f json -o bandit-report.json || true
        bandit -r dsl/ || true

    - name: Run safety checks
      run: |
        safety check --json --output safety-report.json || true
        safety check || true

    - name: Run ruff linting
      run: |
        ruff check dsl/ || true

    - name: Run pylint
      run: |
        pylint dsl/ || true

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # Matrix completion status
  test-complete:
    name: All Tests Complete
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
    - name: Check test matrix success
      run: |
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "✅ All platform tests passed!"
          exit 0
        else
          echo "❌ Some platform tests failed!"
          exit 1
        fi
